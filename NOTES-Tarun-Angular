-------------------------------------------------directories structure start
e2e[
    end to end text script

]

node modle [
    all module and libraries reside
]

src[
    this is main folder workspacce reside inside
    -app -> it is the place where all component services directories pipes ets
    - app.component.spes.ts => it mean thease are test scripts
    - app.component.ts => where all the files which realeted to component
    - app.module.ts => iit is module
]

enviroment[
    here we will keep configration variables or pipelines dev test
]

----------------------------------------------------------------------------------
main.ts[
    --it is main file where runing started
    -by default appmodule inside
    -platformBrowserDynamic it initilize te browser
    -bootstrapModule is the main whichs loads and starts the application
    --yes we can change bootstrapModule default module
]
----------------------------------------------------------------------------------
style.css[
    containe all globle style like font etc
]
angular.json[
    contain all the cobnfigration of projects
]
karma.conf.js[
    confi test scripts
    karma runner our unit testing
]

package.json[
    -to understand existing application we first go to pkg.json

]
package-lock.json[

]

-------------------------------------------------directories structure end

Angular cli commands
-----------------------
1. ng new projectname /// to create new projects 
2. angular v  //////// to give all about ng
3. ng genrate what-we-want-to-genrate  <name> ////////// it take parameter what we want to genrate [component,mudule,service,middleware,pipe]
 -sortcut
   - ng g c //// ng genrate component
   - ng g s //// servoce

4. ng serve
    - user to compile our application/
    -by default usses 4200 port
    - we can chane port number ex => ng serve --port 4300  //////// now it run 4300 port
    -production 

5. ng test 
    - it help to run all our test unit
    -test are run using kerma runner

6. ng e2e
    - it will test all end to end tests
    -it is run protracter files

7. ng update
    - upgrade the project to latest verssion

8. ng lint
    -check the syntex

---------------------------------------------- end cli commands

all abouts angular mudules
------------------------------------
 1. module are the small logical functionality
 2. login module
    -register
    -login
    -forgot pass
    -change pass
3. mudule have components directories pipes
4. it allows us to esay to maintain debug 
5. by default atleast one module exists in angular which is call app module
6. every module needs to define by @ngMudule
7. import other mudule inside the mudule
8. ng genrate module <module-name>

------------------------------------ all abouts angular moduls ends


all abouts angular Decorators
------------------------------------
1. Decorators invoke on run time
2. Decorators are the function which return function
3. Decorators allows us to invoke function
4. it will allways start with @
5. @ngModule @ngComponent @Input @Output
6. these decorators data have its meta data
7. some meta data are mendotry some are optional
8. function decorators class decorators 

------------------------------------ all abouts angular Decorators


All abouts angular component
------------------------------------
1. Component is a smaller functionality which can be reuse multipul time in the application
2. smaller feture inside bigger functionality
    -login -component
    -register -component
    -forgot -component
3. allows esay to develop and maintain or dubug
4. Tree hierarchy is made of component parent child child 2
5. angular comes default impt component which is app component
    -templateUrl or template
    -styleUrl
6. u can have component inside component and its call "sub component"
7. we can genrate component using ng g c <component-name> commands
8. we can genrate component inside any module 
9. we can include component from the other module into app-module or any other module

------------------------------------ all abouts angular component

All abouts angular directives
------------------------------------
1. threee types of directives
   -component directives
     --every directives have atleast 1 directives(component)
   -structural directives
     --these directives alter the structure of the template 
     --ngfor ngif ngswitch
     --ngfor ngwhile
   -attribute directives
      --ngclass and ngStyle

2. it help to chage structure inside template

------------------------------------ all abouts angular directives


All abouts angular If
------------------------------------
1. *ngIf statement
      -built in structural directives
      -start with * symbol
      -expression resolve with true or false
2. *ngIf with the else statement
    -use with <ng-template></ng-template> directive

------------------------------------ all abouts angular ngIf



All abouts angular Switch
------------------------------------
1. ngSwitch
      -built in structural directives
      -[ngSwitch]="Enter Val"
      -starts whith *ngSwitchCase
      -it is use to compare more then one expression at a time
         --unlike *ngIf
         --we have multipul checks in ngswitch

Syntax :-
 <div [ngSwitch]="switchvalue">
    <div *ngSwitchCase="1">Case 1</div>
    <div *ngSwitchCase="2">Case 2</div>
    <div *ngSwitchCase="3">Case 3</div>
    <div *ngSwitchCase="4">Case 4</div>
    <div *ngSwitchCase="4">Case 4</div>
    <div *ngSwitchDefault="4">Default</div>    
</div>

------------------------------------ all abouts angular switch

All abouts angular Loops
------------------------------------
1. *ngFor user for for Loops
      -we can find index even odd index in Loop
            --even as e , odd as o, index ad i etc
       -we can iterate array of an obj or array
       -we use with array 

Syntax:-
<div *ngFor="let user of users; index as i; even as e; odd as o;">
    <p>{{user.id}} </p>
    <p>{{user.name}} </p>
    <p>{{o}} </p>
    <p>{{e}} </p>
    <p>{{i}} </p>
</div>
------------------------------------ all abouts angular Loop



All abouts angular Ng Style
------------------------------------
1. the ngStyle is a directive let u set a given Dom element style proprties
2. we can send dynamic value waya variables
3. u can set one or more then proprties.
4. we can pass more then one videos in ngStyle

Syntax :-  <div [ngStyle]="background-color":"value","color":"red"></div> 

------------------------------------ all abouts angular Ng Style


All abouts angular ngClass
------------------------------------
1. ngClass is a directive which allow us to set class name fro the elemrnt
2. we can pass dynamic value waya variables
3. [ngClass] is use
4. we pass <class-name> in single quotes inside double quotes

Syntax :-  <div [ngClass]="'any-class-name'"></div> 

------------------------------------ all abouts angular ngClass


All abouts angular Data Binding
------------------------------------
1. Binding means bind data from template to controller and vice-versa
2. define how as the data flow and how data gets or updated based on business logic
3. Type Of data Binding There 2 type of Binding
    #- One way data Binding
      --Pass data component to views
      --we can get data in view usig {{variable-name}}
      --One way pass data
    -Type of One way data Binding
      ! Component to view
        --Interpolation -> it is use to sending data controller to and displayng it
        --proprty Binding -> all the html have proprties we can sent in component to view
        --style binding -> all the html proprties have style we can set in component to view
        --attribute binding -> send data
      ! view to component
        --Event binding -> with event  click over we can send data view to controller 
      
    #- Tow way data Binding
      -we send data view to controller and again controller to view

------------------------------------ all abouts angular Data Binding



All abouts angular One Way Data Binding 
------------------------------------
1. Iterpolation
   -use to transmit data controller to view
   -we can access data using {{ }} expression 

2. property Binding
   -is a technique that allow us to bind properties of elements from component to views[template]
   -can be userd fro all proprties like innerHtml,src.
   -data flow is one way
   -syntax: [property]="expression", [placeholder]="expression" , [src]="expression"

3. attribute Binding
    -is a technique that allow us to Crate or bind attribute of elements from component to views[template]
    -data is flow in one way
    -u can use any existing property or create custom
    -syntax :-  [attr.anyname]="{expression}" 

4. Event Binding
     -is a technique that allow us to bind Events of elements from View to Component
    -data is flow in one way data flow view to component
    -Syntax:- <button (any eveny name)="anyfunction()">Click me</button>

------------------------------------ all abouts angular One Way Data Binding 

All abouts angular One Way Data Binding 
------------------------------------
1. Two Way Data binding
    -is a technique that allow us to bind properties of elements from component to views[template] or vice versa
   -data flows both ways.
   -two way data binding is a combination of Event binding + property binding
   -we bind using [ngModel]-square brackets of property binding with parentheses of event binding in single notation
   -syntax:- <Input [(ngModel)]="data />
   -mostly used in input controls where we can read data from user input and perform some operation on its

------------------------------------ all abouts angular Two Way Data Binding 



All abouts angular Pipes
------------------------------------
1. pipes are used to transform data 
2. pipe take an input and converts/transform into desired outpFormatut
3. pipes are wirtten using pipes operator |
4. we can apply pipes to any view/template and any data inputs
5. Types of Pipes
     -bulit in pipes { Lowercase,Uppercase,Date,Curency,json }
     -parametrized pipes { We can pass one or more parameter in pipes }
     -chaining pipes { we connect multipul pipes to data inputs }
     -custom pipes { we can create our own pipes for various data formating }

------------------------------------ all abouts angular Pipes End




All abouts angular Describe all pipes breif
------------------------------------
1. How to use bulit in pipes 
   syntax:-  {{data | json}}, {{data.firstname | lowercase }} 

2. parameter pipes 
    syntax:- {{data.dob | date:'short' }} {{data.salery | currency:'Ipass-countrycodeNR':'INR':'3.0-2' }}

3. chaining pipes
    syntax:-   {{dob | date | Uppercase }}
     
4. custom pipes
    -we can genrate our new custom pipes in our angular application
    -we can genrate new custom pipe using cmd
    -command ng genrate pipe any-pipe-name
    -pipes needed to to be added to the module - thankfully cli does this work when we auto genrate
    -we need to import the pipes and pipetransform from @angular/core
    -pipe are declared with the decorators @pipe and provide the selector name

------------------------------------ all abouts Describe all pipes breif End


